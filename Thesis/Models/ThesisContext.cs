// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Thesis.Models;

public partial class ThesisContext : DbContext
{
    public ThesisContext(DbContextOptions<ThesisContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Appointment> Appointments { get; set; }

    public virtual DbSet<Consultation> Consultations { get; set; }

    public virtual DbSet<ConsultationInventory> ConsultationInventories { get; set; }

    public virtual DbSet<Doctor> Doctors { get; set; }

    public virtual DbSet<InventoryBatch> InventoryBatches { get; set; }

    public virtual DbSet<InventoryItem> InventoryItems { get; set; }

    public virtual DbSet<InventoryTransaction> InventoryTransactions { get; set; }

    public virtual DbSet<LabOrder> LabOrders { get; set; }

    public virtual DbSet<LabResult> LabResults { get; set; }

    public virtual DbSet<Patient> Patients { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<QueueEntry> QueueEntries { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Staff> Staff { get; set; }

    public virtual DbSet<Supplier> Suppliers { get; set; }

    public virtual DbSet<User> Users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Appointment>(entity =>
        {
            entity.HasKey(e => e.AppointmentId).HasName("PK__Appointm__8ECDFCC2ADB9232E");

            entity.Property(e => e.AppointmentStatus)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Notes).HasMaxLength(255);

            entity.HasOne(d => d.Doctor).WithMany(p => p.Appointments)
                .HasForeignKey(d => d.DoctorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Appointment_Doctor");

            entity.HasOne(d => d.Patient).WithMany(p => p.Appointments)
                .HasForeignKey(d => d.PatientId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Appointment_Patient");
        });

        modelBuilder.Entity<Consultation>(entity =>
        {
            entity.HasKey(e => e.ConsultationId).HasName("PK__Consulta__5D014A98AEFB73FC");

            entity.Property(e => e.Diagnosis).HasMaxLength(255);

            entity.HasOne(d => d.Appointment).WithMany(p => p.Consultations)
                .HasForeignKey(d => d.AppointmentId)
                .HasConstraintName("FK_Consultation_Appointment");

            entity.HasOne(d => d.Doctor).WithMany(p => p.Consultations)
                .HasForeignKey(d => d.DoctorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Consulation_Doctor");

            entity.HasOne(d => d.Patient).WithMany(p => p.Consultations)
                .HasForeignKey(d => d.PatientId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Consultation_Patient");
        });

        modelBuilder.Entity<ConsultationInventory>(entity =>
        {
            entity.HasKey(e => e.ConsultationInventoryId).HasName("PK__Consulta__6A424114371E8807");

            entity.ToTable("ConsultationInventory");

            entity.HasOne(d => d.Batch).WithMany(p => p.ConsultationInventories)
                .HasForeignKey(d => d.BatchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ConsultationInventory_Batches");

            entity.HasOne(d => d.Consultation).WithMany(p => p.ConsultationInventories)
                .HasForeignKey(d => d.ConsultationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ConsultationInventory_Consultations");
        });

        modelBuilder.Entity<Doctor>(entity =>
        {
            entity.HasKey(e => e.DoctorId).HasName("PK__Doctors__2DC00EBF7F3D27FB");

            entity.Property(e => e.FirstName).HasMaxLength(50);
            entity.Property(e => e.LastName).HasMaxLength(50);
            entity.Property(e => e.LicenseNo).HasMaxLength(50);
            entity.Property(e => e.Specialty).HasMaxLength(50);

            entity.HasOne(d => d.User).WithMany(p => p.Doctors)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DoctorUser");
        });

        modelBuilder.Entity<InventoryBatch>(entity =>
        {
            entity.HasKey(e => e.BatchId).HasName("PK__Inventor__5D55CE58E1B09B95");

            entity.Property(e => e.BatchNumber).HasMaxLength(100);
            entity.Property(e => e.DateReceived).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Item).WithMany(p => p.InventoryBatches)
                .HasForeignKey(d => d.ItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InventoryBatches_Items");
        });

        modelBuilder.Entity<InventoryItem>(entity =>
        {
            entity.HasKey(e => e.ItemId).HasName("PK__Inventor__727E838B4BA43CC3");

            entity.Property(e => e.DateAdded).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.ItemCategory)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ItemName)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.SupplierId).HasColumnName("SupplierID");
            entity.Property(e => e.Unit)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Supplier).WithMany(p => p.InventoryItems)
                .HasForeignKey(d => d.SupplierId)
                .HasConstraintName("FK_InventoryItems_Supplier");
        });

        modelBuilder.Entity<InventoryTransaction>(entity =>
        {
            entity.HasKey(e => e.TransactionId).HasName("PK__Inventor__55433A6B2387BAB2");

            entity.Property(e => e.TransactionDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.TransactionType)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Batch).WithMany(p => p.InventoryTransactions)
                .HasForeignKey(d => d.BatchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InventoryTransactions_Batches");

            entity.HasOne(d => d.PerformedByUser).WithMany(p => p.InventoryTransactions)
                .HasForeignKey(d => d.PerformedByUserId)
                .HasConstraintName("FK_InventoryTransactions_Users");
        });

        modelBuilder.Entity<LabOrder>(entity =>
        {
            entity.HasKey(e => e.LabOrderId).HasName("PK__LabOrder__9CBC017E46482054");

            entity.Property(e => e.OrderDate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Consultation).WithMany(p => p.LabOrders)
                .HasForeignKey(d => d.ConsultationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LabOrders_Consultations");

            entity.HasOne(d => d.OrderedByUser).WithMany(p => p.LabOrders)
                .HasForeignKey(d => d.OrderedByUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LabOrders_Users");

            entity.HasOne(d => d.Patient).WithMany(p => p.LabOrders)
                .HasForeignKey(d => d.PatientId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LabOrders_Patients");
        });

        modelBuilder.Entity<LabResult>(entity =>
        {
            entity.HasKey(e => e.LabResultId).HasName("PK__LabResul__3CEBE3B6E2F94FF4");

            entity.Property(e => e.ReferenceRange).HasMaxLength(100);
            entity.Property(e => e.ResultValue)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.TestName)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Unit).HasMaxLength(50);

            entity.HasOne(d => d.LabOrder).WithMany(p => p.LabResults)
                .HasForeignKey(d => d.LabOrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LabResultDetails_LabOrders");
        });

        modelBuilder.Entity<Patient>(entity =>
        {
            entity.HasKey(e => e.PatientId).HasName("PK__Patients__970EC34699296116");

            entity.Property(e => e.PatientId).HasColumnName("PatientID");
            entity.Property(e => e.ContactNo).HasMaxLength(20);
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.PatientSex)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.PaymentId).HasName("PK__Payments__9B556A38398233D1");

            entity.Property(e => e.Amount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.PaymentDate).HasDefaultValueSql("(sysdatetime())");
            entity.Property(e => e.PaymentMethod)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.PaymentReason)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.Appointment).WithMany(p => p.Payments)
                .HasForeignKey(d => d.AppointmentId)
                .HasConstraintName("FK_Payment_Appointment");

            entity.HasOne(d => d.Consultation).WithMany(p => p.Payments)
                .HasForeignKey(d => d.ConsultationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Payment_Consultation");

            entity.HasOne(d => d.Patient).WithMany(p => p.Payments)
                .HasForeignKey(d => d.PatientId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Payment_Patient");

            entity.HasOne(d => d.RecordedByUser).WithMany(p => p.Payments)
                .HasForeignKey(d => d.RecordedByUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Payment_User");
        });

        modelBuilder.Entity<QueueEntry>(entity =>
        {
            entity.HasKey(e => e.QueueEntryId).HasName("PK__QueueEnt__2FC58AB1771D8ADB");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysdatetime())");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Appointment).WithMany(p => p.QueueEntries)
                .HasForeignKey(d => d.AppointmentId)
                .HasConstraintName("FK_Queue_Appointment");

            entity.HasOne(d => d.Consultation).WithMany(p => p.QueueEntries)
                .HasForeignKey(d => d.ConsultationId)
                .HasConstraintName("FK_Queue_Consultation");

            entity.HasOne(d => d.Doctor).WithMany(p => p.QueueEntries)
                .HasForeignKey(d => d.DoctorId)
                .HasConstraintName("FK_Queue_Doctor");

            entity.HasOne(d => d.Patient).WithMany(p => p.QueueEntries)
                .HasForeignKey(d => d.PatientId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Queue_Patient");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PK__Roles__8AFACE1A631629D0");

            entity.HasIndex(e => e.RoleName, "UQ__Roles__8A2B6160B3E72222").IsUnique();

            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Staff>(entity =>
        {
            entity.HasKey(e => e.StaffId).HasName("PK__Staff__96D4AB17A8C62CDD");

            entity.Property(e => e.FirstName).HasMaxLength(50);
            entity.Property(e => e.LastName).HasMaxLength(50);

            entity.HasOne(d => d.User).WithMany(p => p.Staff)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StaffUser");
        });

        modelBuilder.Entity<Supplier>(entity =>
        {
            entity.HasKey(e => e.SupplierId).HasName("PK__Supplier__4BE666B421EA463B");

            entity.Property(e => e.ContactNo).HasMaxLength(100);
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.SupplierName)
                .IsRequired()
                .HasMaxLength(150);
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__Users__1788CC4C0C901872");

            entity.HasIndex(e => e.Username, "UQ__Users__536C85E463D29733").IsUnique();

            entity.Property(e => e.ContactNo).HasMaxLength(100);
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.UserPassword)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.Role).WithMany(p => p.Users)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_User_Role");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}